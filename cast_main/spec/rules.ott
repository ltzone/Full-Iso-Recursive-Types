%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METAVARIABLES

metavar typevar, X , Y ::= {{ repr-locally-nameless }} 

metavar termvar, x , y ::= {{ repr-locally-nameless }}

metavar castvar, cx , cy ::= {{ repr-locally-nameless }}

metavar label, l ::= {{ coq nat }} {{ tex \mathit{[[label]]} }}

metavar int, i ::= {{ coq nat }} {{ tex \mathit{[[int]]} }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR (LNgen portion)

grammar

typ, A {{ tex A }}, B {{ tex B }}, C {{ tex C }}, Char {{ tex \mathsf{Char} }}, Bool {{ tex \mathsf{Bool} }}, UKN {{ tex \,?\, }} :: 't_' ::= {{ com types }}
  | X              ::  :: var    {{ com type variable }}
  | Int            ::  :: int     {{ tex \mathsf{Int}  }} {{ com int }}
  % | Top            ::  :: top     {{ tex \mathsf{Top}  }} {{ com top type }}
  | A -> B         ::  :: arrow   {{ com function type }}
  | mu X . A       ::  :: mu      (+ bind X in A +)
                                  {{ com recursive type }}
                                  {{ tex \mu [[X]].[[A]] }}
  | A [ X |-> B ]   :: M:: tsubst  {{ coq (open_typ_wrt_typ [[X A]][[B]]) }}
  | A [ B / X ]   :: M:: tsubstt  {{ coq (typsubst_typ [[B]] [[X]]  [[A]]) }}
  | ( A )          :: S:: paren   {{ coq [[A]] }}


exp, e {{ tex e }}, v {{ tex v }}, u {{ tex u }}, v_f {{ tex v_f }} :: 'e_' ::= {{ com expressions }}
  | x              ::  :: var     {{ com variable }}
  % | T              ::  :: top     {{ com top }}
  | i              ::  :: lit     {{ com lit }}
  | \ x : A . e
                   ::  :: abs     (+ bind x in e +)
                                  {{ com abstraction with argument annotation }}
                                  {{ tex \lambda [[x]][[:]][[A]].\,[[e]] }}
  % | fix x : A . e  ::  :: fixpoint
  %                                 (+ bind x in e +)
  %                                 {{ com fixpoint }}
  %                                 {{ tex [[fix]]~[[x]][[:]][[A]].\,[[e]] }}
  | e1 e2          ::  :: app     {{ com applications }}
  | cast [ c ] e   :: :: cast    
  | e1 [ x |-> e2 ] :: M:: subst   {{ coq (open_exp_wrt_exp [[x e1]][[e2]]) }}

  | ( e )          :: S:: paren   {{ coq ([[e]]) }}
  | 1              :: M:: one     {{ tex 1 }} {{ coq (e_lit 1) }}
  | 2              :: M:: two     {{ tex 2 }} {{ coq (e_lit 2) }}

mode, m {{ tex m }} :: 'm_' ::= {{ com modes }}
  | pos       ::   ::  pos    {{ com positive }} {{ tex \oplus }}
  | neg       ::   ::  neg    {{ com negative }} {{ tex \ominus }}


castop, c {{ tex c }} :: 'c_' ::= {{ com cast operators }}
  | cx           ::  :: var     {{ com cast variable }}
  % | ~ cx           ::  :: revvar     {{ com reverse cast variable }}
  | id           ::   ::  id      {{ com id operator }} {{ tex \mathsf{id} }}
  | unfold [ A ] ::   ::  unfold  {{ com unfold operator }} {{ tex \downarrow_{[[A]]} }}
  | fold [ A ]   ::   ::  fold    {{ com castdn }} {{ tex \uparrow_{[[A]]} }}
  | c1 -> c2     ::   ::  arrow   {{ com arrow operator }} {{ tex [[c1]]\rightarrow[[c2]] }}
  | c1 . c2      ::   ::  seq     {{ com composition of a sequence of ops }} {{ tex [[c1]] \cdot [[c2]] }}
  | fixc cx . c   ::   ::  fixc    (+ bind cx in c +)
    {{ com fixpoint }} {{ tex \mathsf{fix} ~ [[cx]] .\, [[c]] }}
  | ~ c         ::  M  ::  reverse     {{ com reverse operator }} {{ tex \neg [[c]] }} {{coq (rev_cast [[c]]) }}
  | c1 [ cx |-> c2 ]  ::  M  ::  subst     {{ coq (open_castop_wrt_castop [[cx c1]] [[c2]]) }}
  | ( c )          :: S:: paren   {{ coq [[c]] }}


embed {{ coq

Fixpoint rev_cast (c:castop) :=
  match c with
  | c_id => c_id
  | c_arrow c1 c2 => c_arrow (rev_cast c1) (rev_cast c2) 
  | c_fixc c => c_fixc (rev_cast c)
  | c_unfold t => c_fold t
  | c_fold t => c_unfold t
  | c_seq c1 c2 => c_seq (rev_cast c2) (rev_cast c1)
  | c_var_f x => c_var_f x
  | c_var_b x => c_var_b x
  end.

}}


substitutions
  single exp x   :: subst
  single typ X   :: typsubst
  single castop cx :: castsubst


freevars
  exp x      :: termfv
  typ X      :: typefv
  castop cx  :: castfv


parsing
  t_arrow right t_arrow

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR  (non LNgen portion)

grammar

ctx, G {{ tex \Gamma }} :: 'ctx_' ::=  {{ com term context }} {{ coq list ( atom * typ ) }}
  | []              ::  :: empty       {{ coq nil }}
                                       {{ tex \cdot }}
  | G , x : A       ::  :: cons        {{ coq (cons ([[x]],[[A]]) [[G]]) }}
  | G1 , G2         :: M:: constwo     {{ coq ([[G2]] ++ [[G1]]) }}
  | G1 , x : A , G2 :: M:: constwo_mid {{ coq ([[G2]] ++ (cons ([[x]],[[A]]) [[G1]])) }}


tctx, D {{ tex \Delta }} :: 'tctx_' ::= {{ com type context }} {{ coq list ( atom * unit ) }}
  | []              ::  :: empty        {{ coq nil }}
                                        {{ tex \cdot }}
  | D , X           ::  :: cons         {{ coq (cons ([[X]],tt ) [[D]]) }}
  | D1 , D2         :: M:: constwo      {{ coq ([[D2]] ++ [[D1]]) }}
  | D1 , X , D2     :: M:: constwo_mid  {{ coq ([[D2]] ++ (cons ([[X]],tt ) [[D1]])) }}


cctx, E {{ tex \mathbb{E} }} :: 'cctx_' ::= {{ com cast context }} {{ coq list ( atom * (typ * typ)) }}
  | []               ::  :: empty        {{ coq nil }} {{ tex \cdot }}
  | E , cx : A ~~> B ::  :: cons         {{ coq (cons ([[cx]], ([[A]], [[B]])) [[E]]) }}
  % | rev E      :: M :: rev         {{ coq (reverse_E [[E]]) }}
  | ( E )           :: S :: paren        {{ coq ([[E]]) }}

actx, H {{ tex H }} :: 'actx_' ::= {{ com assumption context }} {{ coq list ((typ * typ)) }}
  | []               ::  :: empty        {{ coq nil }} {{ tex \cdot }}
  | ( A , B ) , H     ::  :: cons         {{ coq (cons ([[A]], [[B]]) [[H]]) }}
  | ( H )           :: S :: paren        {{ coq ([[H]]) }}


terminals :: 'terminals_' ::=
  | ~>           ::  :: subst      {{ tex \mapsto }}
  | \\           ::  :: lambda2    {{ tex \lambda }}
  | ->           ::  :: arrow      {{ tex \rightarrow }}
  | .            ::  :: seq        {{ tex \cdot }}
  | -->          ::  :: red        {{ tex \hookrightarrow }}
  | |-           ::  :: turnstile  {{ tex \vdash }}
  | |=           ::  :: dash2      {{ tex \models }}
  | T            ::  :: t          {{ tex \top }}
  | :            ::  :: Typ        {{ tex : }}
  | in           ::  :: in         {{ tex \in }}
  | ,            ::  :: break      {{ tex , }}
  | split        ::  :: split      {{ tex \mathsf{Split} }}
  | <*>          ::  :: disjointSpec    {{ tex ** }}
  | *            ::  :: disjoint        {{ tex * }}
  | *ax          ::  :: disjointAx      {{ tex *_{ax} }}
  | ~            ::  :: consistencySpec {{ tex \approx }}
  | ~~           ::  :: consistent {{ tex \approx\approx }}
  | ~~>          ::  :: TypeRed    {{ tex \hookrightarrow }}
  | |->          ::  :: tsubst     {{ tex \mapsto }}
  | <            ::  :: val2exprl  {{ tex \langle}}
  | >            ::  :: val2exprr  {{ tex \rangle}}
  | topl         ::  :: topl       {{ tex \rceil }}
  | topr         ::  :: topr       {{ tex \lceil }}
  | fix          ::  :: fixpoint   {{ tex \mathsf{fix} }}
  | Forall       ::  :: forall     {{ tex \forall }}

formula :: 'formula_' ::=
  | judgement                ::   :: judgement
  | not formula              :: M :: not
    {{ tex \neg [[formula]] }}
    {{ coq not ([[formula]]) }}
  | formula1 or formula2     :: M :: or
    {{ tex [[formula1]]~\lor~[[formula2]] }}
    {{ coq ([[formula1]] \/ [[formula2]]) }}
  | ( formula )              :: M :: brackets
    {{ tex ([[formula]]\!) }}
    {{ coq [[formula]] }}
  | uniq G                   ::   :: uniqG
    {{ coq uniq [[G]] }}
    {{ tex }}
  | uniq D                   ::   :: uniqD
    {{ coq uniq [[D]] }}
    {{ tex }}
  | uniq E                   ::   :: uniqE
    {{ coq uniq [[E]] }}
    {{ tex uniq [[E]] }}
  | x : A in G               ::   :: inG
    {{ coq binds [[x]][[A]][[G]] }}
  | x notin fv e             ::   :: fresh
    {{ coq [[x]] \notin fv[[e]] }}
  | x notin dom G            ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[G]]) }}
    {{ tex [[x]] \notin [[G]] }}
  | X in dom D               ::   :: InDx
    {{ coq [[X]] `in` (dom [[D]]) }}
    {{ tex [[X]] \in [[D]] }}
  | X notin dom D               ::   :: notInDx
    {{ coq [[X]] `notin` (dom [[D]]) }}
    {{ tex [[X]] \notin [[D]] }}
  | cx notin dom E               ::   :: notInEx
    {{ coq [[cx]] `notin` (dom [[E]]) }}
    {{ tex [[cx]] \notin [[E]] }}
  | l1 <> l2                 ::   :: label
    {{ coq [[l1]] <> [[l2]] }}
    {{ tex [[l1]] \neq [[l2]] }}
  | A = B                    ::   :: type
    {{ coq [[A]] = [[B]] }}
    {{ tex [[A]] = [[B]] }}
  | e1 = e2                  ::   :: term
    {{ coq [[e1]] = [[e2]] }}
    {{ tex [[e1]] = [[e2]] }}
  | e1 --> i e2              :: M :: multistep
    {{ coq (star exp step)[[i]][[e1]][[e2]] }}
    {{ tex [[e1]]~[[-->]][[i]]~[[e2]] }}
  | A <: B                   ::   :: subNoCtx
    {{ tex [[A]] <: [[B]] }}
  | e1 --> * e2               ::   :: msarrow
    {{ tex [[e1]]~[[-->]]^*~[[e2]] }}
  | A ~~> B : cx in E               ::   :: InEx
    {{ coq In ([[cx]], ([[A]], [[B]])) [[E]] }}
    {{ tex [[A]] \hookrightarrow [[B]] : [[cx]] \in [[E]] }}
  | A =. B              ::  :: Tyeq
      {{ coq Tyeq [[A]] [[B]] }}
      {{ tex [[A]] \sim [[B]] }}
  | ( A , B ) in H              ::   :: InH
    {{ coq In ([[A]], [[B]]) [[H]] }}
    {{ tex ([[A]],[[B]]) \in [[H]] }}


% embed {{ coq

% Definition reverse_E (E: cctx) :=
%   map (fun v => match v with (A, B) =>  (B, A) end) E.

% }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Well Formed Type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
WellFormedType :: '' ::=

defn
D |- A ::   :: WFT :: 'WFT_'
{{ com Well Formed Type }}
by


------------- :: int
D |- Int

X in dom D
------------- :: var
D |- X


D |- A
D |- B
------------- :: arrow
D |- A->B

D, X |- A
------------- :: rec
D |- mu X. A



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Well Formed Environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
WellFormedTypeEnv :: '' ::=

defn
|- D ::   :: WFTyE :: 'WFTyE_'
{{ com Well Formed Type Environment }}
by

------------ :: empty
|- []


|- D
X notin dom D
------------ :: cons
|- D, X


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Type Reduction and Typing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




defns
TypCast :: '' ::=                          

defn
D ; E |- A ~~> B : c ::  :: TypCast :: 'TCast_'
{{ com Typing Reduction Rules }}
by

D |- A
uniq E
----------------- :: id
D; E |- A ~~> A : id


D; E |- A1 ~~> A2 : c1
D; E |- B1 ~~> B2 : c2
----------------- :: arrow
D; E |- A1 -> B1 ~~> A2 -> B2 : c1 -> c2


D |- mu X. A
uniq E
----------------- :: unfold
D; E |- mu X. A ~~> A [X |-> mu X. A] : unfold [ mu X. A ]


D |- mu X. A
uniq E
----------------- :: fold
D; E |- A [X |-> mu X. A] ~~> mu X. A : fold [ mu X. A]

D; E |- A ~~> B : c1
D; E |- B ~~> C : c2
----------------- :: seq
D; E |- A ~~> C : c1 . c2

D |- A
D |- B
uniq E
A ~~> B : cx in E
----------------- :: var
D; E |- A ~~> B : cx


D; E, cx: A1 -> B1 ~~> A2 -> B2 |- A1 ~~> A2 : c1
D; E, cx: A1 -> B1 ~~> A2 -> B2 |- B1 ~~> B2 : c2
----------------- :: fix
D; E |- A1 -> B1 ~~> A2 -> B2 : fixc cx. ( c1 -> c2 )


defns
WellFormedTermEnv :: '' ::=

defn
|- G ::   :: WFTmE :: 'WFTmE_'
{{ com Well Formed Term Environment }}
by

------------ :: empty
|- []


|- G
[] |- A
x notin dom G
------------ :: cons
|- G, x : A


defns
Typing :: '' ::=

defn
G |- e : A ::  :: Typing :: 'Typing_'
{{ com Typing rules }}
by


|- G
----------------- :: int
G |- i : Int

|- G
x : A in G
----::var
G |- x : A


G, x : A1 |- e : A2
----::abs
G |- \ x : A1 . e : A1 -> A2


G |- e1 : A1 -> A2
G |- e2 : A1
----::app
G |- e1 e2 : A2



G |- e : A
[] ; [] |- A ~~> B : c
----::cast
G |- cast [ c ] e : B





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Values :: '' ::=

defn
value e ::  :: value :: V_
{{ com Values }} {{ tex \textsf{value } [[e]] }}
by



---------------------- :: lit
value i


--------------------------------- :: abs
value (\x : A . e)


value e
---------------------- :: fold
value (cast [ fold [A] ] e)


% should be value, otherwise erasure will fail
value e
---------------------- :: arrow
value (cast [ c1 -> c2 ] e)




% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% defns
% CValues :: '' ::=

% defn
% cvalue m e ::  :: cvalue :: CV_
% {{ com CValues }} {{ tex \textsf{cvalue } [[m]] \  [[e]] }}
% by




defns
Reduction :: '' ::=

defn
e --> e' ::  :: Reduction :: 'Red_'
{{ com Reduction rules }}
by

value e'
----------------- :: beta
(\ x : A . e) e' --> e [ x |-> e' ]


e1 --> e1'
----------------- :: appl
e1 e2 --> e1' e2



value v1
e2 --> e2'
----------------- :: appr
v1 e2 -->  v1 e2'



value e1
value e2
----------------- :: cast_arr
(cast [ c1 -> c2 ] e1) e2 --> cast [c2] (e1 (cast [~ c1] e2))



value e
----------------- :: cast_seq
cast [ c1 . c2 ] e --> cast [ c2 ] (cast [ c1 ] e)


e --> e'
----------------- :: cast
cast [ c ] e --> cast [ c ] e'


value v
----------------- :: castelim
cast [ unfold [A] ] (cast [ fold [A] ] v) --> v


value v
----------------- :: castid
cast [ id ] v --> v


% cast [fix x. c] e -> cast [c [x := fix x. c] ] e

value e
----------------- :: castfix
cast [ fixc cx . c ] e --> cast [ c [ cx |-> fixc cx . c ] ] e
