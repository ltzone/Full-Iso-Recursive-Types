############################################################################
#
#  Primary targets:
#    all           - the default target
#    coq           - builds all .vo files
#    doc           - builds PDF specification for all the rules
#    clean         - removes generated Coq files
#    realclean     - removes generated Coq files and documentation
#
#  Other targets:
#    rebuild       - regenerates files from Ott language specifications
#
############################################################################



ifeq ($(shell uname), Darwin)
LATEXMK = latexmk
else
LATEXMK = latexmk.exe
endif



## Paths to executables. Do not include options here.
## Modify these to suit your Coq installation, if necessary.

OTT = ott
LNGEN = lngen #$(stack exec lngen)
COQC = coqc
COQDEP = coqdep
COQDOC = coqdoc
## ott definitions
OTT_LOC = ./spec
DOC_LOC = ./doc


OTT_SOURCE = rules equi

OTT_FILES = $(foreach i, $(OTT_SOURCE), $(OTT_LOC)/$(i).ott)
OTT_IFLAGS = $(foreach i, $(OTT_SOURCE), -i $(OTT_LOC)/$(i).ott) -merge true


## Name of the submakefile generated by coq_makefile

COQMKFILENAME=CoqSrc.mk


## Directories

DOCDIR = html  ##  where generated HTML documentation should go.

## List of files to be compiled and documented.

FILES = $(patsubst %.v,%,$(wildcard *.v))

## Lists calculated from the above.
VFILES   = $(foreach i, $(FILES), $(i).v)
VOFILES  = $(foreach i, $(FILES), $(i).vo)


############################################################################


.PHONY: all clean coq dist doc documentation rebuild pdf rules
.SUFFIXES: .v .vo

all: syntax_ott.v rules_inf.v coq

quick:  $(COQMKFILENAME) $(VFILES)
	@$(MAKE) -f CoqSrc.mk quick

coq: $(COQMKFILENAME) $(VFILES)
	@$(MAKE) -f CoqSrc.mk

clean:
	rm -f *.vo  *.vos *.vok *.glob *.cmi *.cmx *.o .*.aux .CoqSrc.mk.d
	rm -f **/*.vo  **/*.vos **/*.vok **/*.glob **/*.cmi **/*.cmx **/*.o **/.*.aux **/.CoqSrc.mk.d
	rm -rf $(DOCDIR) $(COQMKFILENAME) $(COQMKFILENAME).conf

realclean: clean
	rm -f syntax_ott.v rules_inf.v $(DOC_LOC)/rules.tex $(DOC_LOC)/*.aux $(DOC_LOC)/*.fls  $(DOC_LOC)/*.log $(DOC_LOC)/*.fdb_latexmk $(DOC_LOC)/*.pdf

rules: $(DOC_LOC)/rules.tex syntax_ott.v rules_inf.v

############################################################################
# ott related

rebuild: rules rules_inf.v

fullrebuild: rebuild pdf coq

syntax_ott.v: $(OTT_FILES)
	$(OTT)  -coq_lngen true -coq_expand_list_types true -coq_names_in_rules false $(OTT_FILES)  -o $@
	@if grep '<<no parses (' $@ >/dev/null 2>&1 && \
	[ -z "$(DONTSTOP)" ]; then \
		echo; \
	echo "***** OTT PARSE ERROR(S) *****"; \
		grep -n '<<no parses (' $@; \
		$(RM) $@; \
		exit 1; \
	fi >&2

rules_inf.v: $(OTT_FILES)
	$(LNGEN) --coq rules_inf.v --coq-ott syntax_ott $(OTT_LOC)/rules.ott

pdf: $(DOC_LOC)/main.pdf

$(DOC_LOC)/main.pdf: $(DOC_LOC)/rules.tex $(DOC_LOC)/main.tex
	cd $(DOC_LOC) && $(LATEXMK) -pdf main.tex

$(DOC_LOC)/rules.tex: $(OTT_FILES)
	$(OTT) $(OTT_IFLAGS)  -tex_show_meta false -tex_wrap false -o $@


$(COQMKFILENAME): Makefile $(shell ls *.v | grep -v _ott.v | grep -v _inf.v)
	coq_makefile -arg '-w none' -f _CoqProject -o $(COQMKFILENAME)

############################################################################

.depend: $(VFILES)
	$(COQDEP) -f _CoqProject > .depend

include .depend